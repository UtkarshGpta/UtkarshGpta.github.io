<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Utkarsh Gupta</title>
 <link href="http://about.me/UtkarshGpta/atom.xml" rel="self"/>
 <link href="http://about.me/UtkarshGpta/"/>
 <updated>2016-03-14T17:33:15+05:30</updated>
 <id>http://about.me/UtkarshGpta</id>
 <author>
   <name>Utkarsh Gupta</name>
   <email>utkarshg1408@gmail.com</email>
 </author>

 
 <entry>
   <title>SSH Keys Simplified</title>
   <link href="http://about.me/UtkarshGpta/2016/03/13/ssh-keys/"/>
   <updated>2016-03-13T00:00:00+05:30</updated>
   <id>http://about.me/UtkarshGpta/2016/03/13/ssh-keys</id>
   <content type="html">&lt;p&gt;I&amp;#39;ve come across SSH keys in the past, but I never used them since I found them difficult to use and the couldn&amp;#39;t find any need! Recently I was introduced to them in &lt;strong&gt;MediaWiki Hackaton&lt;/strong&gt; here at IIT Roorkee, and that&amp;#39;s when I learnt about them. I wrote this article assuming you know nothing about SSH keys and tried to keep it as simple as possible.  &lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;What is SSH?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;SSH(&lt;em&gt;Secure Socket Shell&lt;/em&gt;) is a UNIX-based command interface and protocol for securely getting access to a remote computer. SSH keys are one of the common authentication techniques that people use to log into a Unix session.&lt;/p&gt;

&lt;p&gt;As a common example, let&amp;#39;s say you&amp;#39;re using Git and you want to push your commits to your remote repository(let&amp;#39;s say on &lt;a href=&quot;https://www.github.com&quot;&gt;Github&lt;/a&gt;. Up until now, you&amp;#39;d type in your Username and Password each and every time you push your commits to the Github servers - which is gruelling! This problem can be resolved by using SSH keys, where you can authenticate against the key once and now every shell session you start will authenticate using the same SSH key.&lt;/p&gt;

&lt;h2&gt;Analogy&lt;/h2&gt;

&lt;p&gt;Let us say you&amp;#39;re in a house with many locks in it. To open each lock, you had to select a particular key from a bunch of them! Now if we are using SSH keys, we can open each and every lock using a single key! See, isn&amp;#39;t that amazing? All we need is to create a public and private key where:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Private Key == House key&lt;/p&gt;

&lt;p&gt;Public Key == House locks&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Generating a new SSH key (Using OpenSSH)&lt;/h2&gt;

&lt;p&gt;SSH keys can be generated by using the following commands in terminal:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Before generating a new SSH key, let us check for existing ones&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ls -a ~/.ssh
&lt;span class=&quot;c&quot;&gt;# Lists the files in your .ssh directory, if they exist&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you have them already, you&amp;#39;ll see a list of files probably by the names &lt;strong&gt;id_rsa&lt;/strong&gt; (&lt;em&gt;private key&lt;/em&gt;), &lt;strong&gt;id_rsa.pub&lt;/strong&gt; (&lt;em&gt;public key&lt;/em&gt;) and &lt;strong&gt;known_hosts&lt;/strong&gt;. If not, proceed to next step.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the above files aren&amp;#39;t listed, then execute the following command to generate a pair for you:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ssh-keygen -t rsa -b &lt;span class=&quot;m&quot;&gt;4096&lt;/span&gt; -C &lt;span class=&quot;s2&quot;&gt;&amp;quot;your_email@example.com&amp;quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Creates a new ssh key, using the provided email as a label&lt;/span&gt;
Generating public/private rsa key pair.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Then you&amp;#39;ll be prompted for a file name  where it&amp;#39;ll be saved. Press Enter for default.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Enter a file in which to save the key &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/Users/you/.ssh/id_rsa&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Press enter&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Now you&amp;#39;ll be asked for a &lt;strong&gt;passphrase&lt;/strong&gt;. Type in a passphrase (you&amp;#39;ll be authenticated against SSH keys using this) and press Enter.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Enter passphrase &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;empty &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; no passphrase&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Type a passphrase&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
Enter same passphrase again: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Type passphrase again&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Voila! You&amp;#39;ve generated a SSH key pair!&lt;/p&gt;

&lt;p&gt;For a start, use SSH keys with Github. Refer to &lt;a href=&quot;%22https://help.github.com/articles/generating-an-ssh-key/%22&quot;&gt;Github&lt;/a&gt; for further instructions.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hello World!</title>
   <link href="http://about.me/UtkarshGpta/2016/01/24/hello-world/"/>
   <updated>2016-01-24T00:00:00+05:30</updated>
   <id>http://about.me/UtkarshGpta/2016/01/24/hello-world</id>
   <content type="html">&lt;p&gt;Finally, I am done! My first blog post&amp;#39;s live on the internet. Don&amp;#39;t go by the title, I&amp;#39;m not going to teach you a language or something. Calling it a maiden post would do :D&lt;/p&gt;

&lt;p&gt;It was on my mind to write a blog since a long time ago but time constraint (&lt;em&gt;&lt;del&gt;laziness&lt;/del&gt;&lt;/em&gt;) didn&amp;#39;t allow. So, I was back in my dorm room after a hectic week when I decided to do something productive - something that I&amp;#39;ve been thinking to do since long and that&amp;#39;s when the idea of writing a blog struck me. I&amp;#39;ve always had a keen interest in building things, developing software/applications and learning new programming languages. Recently, I&amp;#39;ve been following up articles over the web laying emphasis upon developers to write blogs for healthy coding. While I was pondering over what to write, my eyes got stuck at the medium sized whiteboard on the wall on which was written - &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;&lt;strong&gt;Jekyll&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Where to write?&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ve found this interesting thing over the internet by the name &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;&lt;strong&gt;Jekyll&lt;/strong&gt;&lt;/a&gt;. I really liked its idea - &lt;strong&gt;static web pages&lt;/strong&gt;, &lt;strong&gt;fast&lt;/strong&gt;, &lt;strong&gt;reliable&lt;/strong&gt; and on top of that, &lt;strong&gt;secure&lt;/strong&gt; as there were no databases involved. I had been thinking to try it out too - giving me some inside into &lt;em&gt;Markdown&lt;/em&gt; and &lt;em&gt;Liquid templating&lt;/em&gt;. And did I mention, it&amp;#39;s &lt;strong&gt;blog aware&lt;/strong&gt;! Using its basic theme and some terminal commands, you can have your blog up and running within a few minutes! So, there were no second thoughts regarding where to write! Since I wanted to build it up myself, it took me some time to learn the basic structure of Jekyll which I shall cover up in my upcoming posts.&lt;/p&gt;

&lt;h2&gt;How did it go?&lt;/h2&gt;

&lt;p&gt;While learning, it had been just like a cakewalk - following up the steps - change, commit, push and voila we have a basic but not so good looking blog! And here is when opensource comes to save us! I decided to take up a previous work, change it according to my needs - since now I know the directory structure in which Jekyll works. But that wasn&amp;#39;t easy enough. Due to different version of Jekyll, some times I was frustrated enough to leave it but it was the end result that acted as a driving force to keep me working. But here I am writing this blog post at 3 a.m. with &lt;a href=&quot;https://www.youtube.com/watch?v=CcVdjZN0-D4&quot;&gt;DeathNote soundtrack&lt;/a&gt; playing in the background and satisfaction in the heart!&lt;/p&gt;

&lt;p&gt;I shall discuss the technicalities in some later blog post, you should try it too. See you then !&lt;/p&gt;
</content>
 </entry>
 

</feed>
